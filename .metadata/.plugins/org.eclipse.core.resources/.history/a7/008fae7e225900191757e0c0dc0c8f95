package io.github.hardlitchi.rest.user.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import io.github.hardlitchi.rest.chat.entity.ChatMessage;
import io.github.hardlitchi.rest.hello.bean.ChatMessageResponse;
import io.github.hardlitchi.rest.security.entity.Account;
import io.github.hardlitchi.rest.user.service.UserService;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@RestController
@RequestMapping(path = "/users")
public class UserController {

	@Autowired
	private UserService userService;

	@ApiOperation(value = "ユーザ作成", notes = "ユーザを作成します。",
			httpMethod = "GET", consumes = "application/json",response = ChatMessage.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "指定された相手への挨拶", response = ChatMessage.class),
			@ApiResponse(code = 500, message = "特定の相手へのエラー内容", response = ChatMessage.class)
	})
	@GetMapping(value = "/{userid:^[0-9]+$}")
	public ChatMessageResponse getUser(@AuthenticationPrincipal(expression = "account") Account account, @PathVariable Long userid) {

		ChatMessage chatMessage = userService.findByUserid(account, userid);

		ChatMessageResponse response = new ChatMessageResponse(chatMessage);

		return response;
	}

	@ApiOperation(value = "ユーザ作成", notes = "ユーザを作成します。",
			httpMethod = "GET", consumes = "application/json",response = ChatMessage.class)
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "指定された相手への挨拶", response = ChatMessage.class),
			@ApiResponse(code = 500, message = "特定の相手へのエラー内容", response = ChatMessage.class)
	})
	@GetMapping()
	public ChatMessageResponse getUsers(@AuthenticationPrincipal(expression = "account") Account account, @PathVariable Long userid) {

		ChatMessage chatMessage = userService.findByUserid(account, userid);

		ChatMessageResponse response = new ChatMessageResponse(chatMessage);

		return response;
	}
}
